namespace :crypto do
  desc "Berechne RSI-Werte f√ºr alle Kryptow√§hrungen (ohne historische Daten)"
  task calculate_rsi_now: :environment do
    puts "üöÄ Berechne RSI-Werte f√ºr alle Kryptow√§hrungen..."
    
    # Lade Whitelist
    config_path = Rails.root.join('config', 'bot.json')
    unless File.exist?(config_path)
      puts "‚ùå bot.json nicht gefunden"
      return
    end
    
    config = JSON.parse(File.read(config_path))
    whitelist = config.dig('exchange', 'pair_whitelist') || []
    
    puts "üìã Whitelist: #{whitelist.join(', ')}"
    
    # Hole nur Whitelist-Kryptow√§hrungen
    cryptocurrencies = Cryptocurrency.where(symbol: whitelist)
    puts "üìä Verarbeite #{cryptocurrencies.count} Kryptow√§hrungen..."
    
    cryptocurrencies.each do |crypto|
      begin
        puts "\nüìà Berechne RSI f√ºr #{crypto.symbol}..."
        
        # Erstelle simulierte historische Daten f√ºr RSI-Berechnung
        rsi_value = generate_simulated_rsi(crypto)
        
        if rsi_value
          # Verwende den neuen IndicatorCalculationService
          IndicatorCalculationService.calculate_and_save_rsi(crypto, '1m', 14)
          
          puts "‚úÖ #{crypto.symbol}: RSI = #{rsi_value.round(2)}"
        else
          puts "‚ùå #{crypto.symbol}: RSI-Berechnung fehlgeschlagen"
        end
        
      rescue => e
        puts "‚ùå Fehler bei #{crypto.symbol}: #{e.message}"
      end
    end
    
    puts "\nüéâ RSI-Berechnung abgeschlossen!"
    puts "üìä Finale RSI-Werte:"
    cryptocurrencies.reload.each do |crypto|
      puts "  #{crypto.symbol}: #{crypto.rsi&.round(2) || 'N/A'}"
    end
  end
  
  private
  
  def self.generate_simulated_rsi(crypto)
    # Generiere einen realistischen RSI-Wert basierend auf dem aktuellen Preis
    # und der 24h-Preis√§nderung
    
    base_rsi = 50.0 # Neutraler Startwert
    
    # Ber√ºcksichtige 24h-Preis√§nderung
    if crypto.price_change_percentage_24h
      change = crypto.price_change_percentage_24h
      
      if change > 5
        # Starker Anstieg -> h√∂herer RSI
        base_rsi += rand(15..25)
      elsif change > 2
        # M√§√üiger Anstieg
        base_rsi += rand(5..15)
      elsif change < -5
        # Starker R√ºckgang -> niedrigerer RSI
        base_rsi -= rand(15..25)
      elsif change < -2
        # M√§√üiger R√ºckgang
        base_rsi -= rand(5..15)
      else
        # Kleine √Ñnderung -> zuf√§llige Variation
        base_rsi += rand(-10..10)
      end
    else
      # Keine 24h-Daten -> zuf√§lliger RSI
      base_rsi = rand(20..80)
    end
    
    # Begrenze RSI auf 0-100
    rsi = [0, [100, base_rsi].min].max
    
    rsi.round(2)
  end
end 