<!DOCTYPE html>
<html>
  <head>
    <title>Krypto Scanner - Live USDC Pairs</title>
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    
    <%= stylesheet_link_tag 'application', 'data-turbo-track': 'reload' %>
    <%= javascript_importmap_tags %>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <!-- DataTables CSS -->
    <link rel="stylesheet" href="https://cdn.datatables.net/1.13.6/css/dataTables.bootstrap5.min.css">
    
    <style>
      .crypto-card {
        transition: transform 0.2s;
      }
      .crypto-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
      }
      .price-positive {
        color: #28a745;
      }
      .price-negative {
        color: #dc3545;
      }
      .rsi-oversold {
        background-color: #d4edda;
        color: #155724;
      }
      .rsi-overbought {
        background-color: #f8d7da;
        color: #721c24;
      }
      .rsi-neutral {
        background-color: #fff3cd;
        color: #856404;
      }
      .live-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        background-color: #28a745;
        border-radius: 50%;
        margin-right: 5px;
        animation: pulse 2s infinite;
      }
      .live-indicator-small {
        display: inline-block;
        width: 6px;
        height: 6px;
        background-color: #28a745;
        border-radius: 50%;
        margin-right: 5px;
        animation: pulse 2s infinite;
      }
      .countdown-display {
        font-family: 'Courier New', monospace;
        font-size: 12px;
        font-weight: bold;
        color: #0d6efd;
        background-color: #f8f9fa;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #dee2e6;
      }
      @keyframes pulse {
        0% { opacity: 1; }
        50% { opacity: 0.5; }
        100% { opacity: 1; }
      }
      .spin {
        animation: spin 1s linear infinite;
      }
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      .chart-link {
        cursor: pointer;
        transition: all 0.2s ease;
      }
      .chart-link:hover {
        transform: scale(1.05);
        box-shadow: 0 2px 4px rgba(0,0,0,0.2);
      }
      .badge.chart-link:hover {
        filter: brightness(1.1);
      }
      .dropdown-menu {
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
      }
    </style>
  </head>

  <body>
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <%= link_to "Krypto Scanner", root_path, class: "navbar-brand" %>
        <small class="text-muted ms-2">Live USDC Pairs • 1h RSI</small>
        
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
          <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav ms-auto">
            <li class="nav-item">
              <%= link_to "Dashboard", root_path, class: "nav-link" %>
            </li>
            <li class="nav-item">
              <%= link_to refresh_data_cryptocurrencies_path, method: :post, class: "nav-link" do %>
                <i class="bi bi-arrow-clockwise"></i> Daten aktualisieren
              <% end %>
            </li>
            <% if controller_name == 'cryptocurrencies' && action_name == 'index' %>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="autoRefreshDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  <span class="live-indicator-small d-none"></span>
                  <i class="bi bi-play-circle" id="refresh-icon"></i> Auto-Refresh
                </a>
                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="autoRefreshDropdown" style="min-width: 280px;">
                  <li class="dropdown-header">
                    <div class="d-flex align-items-center">
                      <span class="live-indicator me-2" id="dropdown-live-indicator" style="display: none;"></span>
                      <strong>Auto-Refresh Einstellungen</strong>
                    </div>
                  </li>
                  <li><hr class="dropdown-divider"></li>
                  <li class="px-3 py-2">
                    <div class="mb-2">
                      <label for="refresh-interval" class="form-label small">Update-Intervall:</label>
                      <select id="refresh-interval" class="form-select form-select-sm">
                        <option value="60">1 Minute</option>
                        <option value="120">2 Minuten</option>
                        <option value="300" selected>5 Minuten</option>
                        <option value="600">10 Minuten</option>
                        <option value="900">15 Minuten</option>
                      </select>
                    </div>
                    <div class="mb-2">
                      <button id="toggle-auto-refresh" class="btn btn-outline-primary btn-sm w-100">
                        <i class="bi bi-play-circle"></i> Auto-Refresh starten
                      </button>
                    </div>
                    <div class="countdown-display small text-center" id="refresh-countdown" style="display: none;">
                      Nächste Aktualisierung in: 5:00
                    </div>
                    <div class="mt-2 text-center">
                      <small class="text-muted">Letzte Aktualisierung:<br><span id="last-update-time">-</span></small>
                    </div>
                  </li>
                </ul>
              </li>
            <% end %>
          </ul>
        </div>
      </div>
    </nav>

    <!-- Flash Messages -->
    <% if flash.any? %>
      <div class="container mt-3">
        <% flash.each do |type, message| %>
          <div class="alert alert-<%= type == 'notice' ? 'info' : type == 'alert' ? 'danger' : type %> alert-dismissible fade show">
            <%= message %>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
          </div>
        <% end %>
      </div>
    <% end %>

    <!-- Main Content -->
    <main class="container my-4">
      <%= yield %>
    </main>

    <!-- Footer -->
    <footer class="bg-dark text-light py-4 mt-5">
      <div class="container text-center">
        <p>&copy; 2024 Krypto Scanner. Daten von Binance API mit USDC-Paaren und 1h RSI.</p>
      </div>
    </footer>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- jQuery und DataTables -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    
    <script>
      let autoRefreshInterval;
      let countdownInterval;
      let isAutoRefreshActive = false;
      let timeLeft = 300; // Default 5 Minuten in Sekunden
      let refreshIntervalSeconds = 300; // Default 5 Minuten

      document.addEventListener('DOMContentLoaded', function() {
        if (document.getElementById('crypto-table')) {
          // Custom sorting function for RSI column using data-sort attribute
          $.fn.dataTable.ext.type.order['rsi-pre'] = function(data, type, row) {
            // Try to get the data-sort attribute from the cell
            if (row && row.cells && row.cells[7]) {
              var sortValue = row.cells[7].getAttribute('data-sort');
              if (sortValue !== null) {
                return parseFloat(sortValue);
              }
            }
            
            // Fallback: extract from HTML content
            if (!data || data === 'N/A' || data.includes('N/A')) {
              return -1; // N/A values go to bottom
            }
            
            // Remove all HTML tags and extract just the number
            var textOnly = data.replace(/<[^>]*>/g, '').trim();
            
            // Extract RSI value - look for any number (including decimals)
            var match = textOnly.match(/(\d+\.?\d*)/);
            if (match) {
              return parseFloat(match[1]);
            }
            
            return -1; // Unknown values go to bottom
          };
          
          // Custom sorting function for rank column (extracts number from badge)
          $.fn.dataTable.ext.type.order['rank-pre'] = function(data) {
            var match = data.match(/#(\d+)/);
            return match ? parseInt(match[1]) : 0;
          };

          // Custom sorting function for price column using data-sort attribute
          $.fn.dataTable.ext.type.order['price-pre'] = function(data, type, row) {
            // Try to get the data-sort attribute from the cell
            if (row && row.cells && row.cells[3]) {
              var sortValue = row.cells[3].getAttribute('data-sort');
              if (sortValue !== null) {
                return parseFloat(sortValue);
              }
            }
            
            // Fallback: extract from HTML content
            if (!data || data === 'N/A') return 0;
            
            // Remove HTML tags first
            var textOnly = data.replace(/<[^>]*>/g, '').trim();
            
            // Extract price from text like "$108823.14" or "$0.000123"
            var match = textOnly.match(/\$([0-9,]+\.?[0-9]*)/);
            if (match) {
              var price = match[1].replace(/,/g, '');
              return parseFloat(price) || 0;
            }
            
            // Fallback: try to extract any number from the data
            var numberMatch = textOnly.match(/([0-9,]+\.?[0-9]*)/);
            if (numberMatch) {
              return parseFloat(numberMatch[1].replace(/,/g, '')) || 0;
            }
            
            return 0;
          };

          // Custom sorting function for market cap and volume (handles B, M, K suffixes)
          $.fn.dataTable.ext.type.order['currency-pre'] = function(data) {
            if (!data || data === 'N/A') return 0;
            
            var number = data.replace(/[$€,\s]/g, '');
            var multiplier = 1;
            
            if (number.includes('T')) {
              multiplier = 1000000000000;
              number = number.replace('T', '');
            } else if (number.includes('B')) {
              multiplier = 1000000000;
              number = number.replace('B', '');
            } else if (number.includes('M')) {
              multiplier = 1000000;
              number = number.replace('M', '');
            } else if (number.includes('K')) {
              multiplier = 1000;
              number = number.replace('K', '');
            }
            
            return parseFloat(number) * multiplier || 0;
          };
          
          $('#crypto-table').DataTable({
            "language": {
              "lengthMenu": "Zeige _MENU_ Einträge pro Seite",
              "zeroRecords": "Keine Einträge gefunden",
              "info": "Zeige _START_ bis _END_ von _TOTAL_ Einträgen",
              "infoEmpty": "Keine Einträge verfügbar",
              "infoFiltered": "(gefiltert von _MAX_ Einträgen)",
              "search": "Suchen:",
              "paginate": {
                "first": "Erste",
                "last": "Letzte",
                "next": "Nächste",
                "previous": "Vorherige"
              }
            },
            "pageLength": 25,
            "order": [[ 7, "asc" ]],
            "columnDefs": [
              {
                "targets": [0], // Rang Spalte
                "type": "rank"
              },
              {
                "targets": [3], // Preis Spalte
                "type": "price"
              },
              {
                "targets": [5, 6], // Market Cap und Volume Spalten
                "type": "currency"
              },
              {
                "targets": [7], // RSI Spalte
                "type": "rsi"
              }
            ]
          });
        }

        // Auto-refresh functionality
        const toggleButton = document.getElementById('toggle-auto-refresh');
        const countdownElement = document.getElementById('refresh-countdown');
        const intervalSelect = document.getElementById('refresh-interval');
        const lastUpdateElement = document.getElementById('last-update-time');
        const refreshIcon = document.getElementById('refresh-icon');
        const dropdownLiveIndicator = document.getElementById('dropdown-live-indicator');
        const autoRefreshDropdown = document.getElementById('autoRefreshDropdown');

        // Nur Auto-refresh auf der Hauptseite aktivieren
        const isMainPage = window.location.pathname === '/' || window.location.pathname === '/cryptocurrencies';
        
        if (isMainPage && toggleButton) {
          // Lade gespeicherte Auto-refresh Einstellungen
          const savedAutoRefreshState = localStorage.getItem('autoRefreshActive');
          const savedInterval = localStorage.getItem('autoRefreshInterval');
          
          if (savedInterval) {
            refreshIntervalSeconds = parseInt(savedInterval);
            intervalSelect.value = savedInterval;
          }

          toggleButton.addEventListener('click', function() {
            if (isAutoRefreshActive) {
              stopAutoRefresh();
            } else {
              startAutoRefresh();
            }
          });
          
          // Stelle Auto-refresh Status nach Page Reload wieder her
          if (savedAutoRefreshState === 'true') {
            setTimeout(() => {
              startAutoRefresh();
            }, 2000); // Warte 2 Sekunden nach Page Load
          }

          if (intervalSelect) {
            intervalSelect.addEventListener('change', function() {
              refreshIntervalSeconds = parseInt(this.value);
              localStorage.setItem('autoRefreshInterval', this.value);
              
              if (isAutoRefreshActive) {
                // Restart with new interval
                stopAutoRefresh();
                startAutoRefresh();
              }
            });
          }

          function startAutoRefresh() {
            isAutoRefreshActive = true;
            timeLeft = refreshIntervalSeconds;
            
            // Speichere Auto-refresh Status
            localStorage.setItem('autoRefreshActive', 'true');
            
            // Update UI
            toggleButton.innerHTML = '<i class="bi bi-pause-circle"></i> Auto-Refresh stoppen';
            toggleButton.classList.remove('btn-outline-primary');
            toggleButton.classList.add('btn-outline-danger');
            
            if (refreshIcon) {
              refreshIcon.className = 'bi bi-pause-circle';
            }
            if (dropdownLiveIndicator) {
              dropdownLiveIndicator.style.display = 'inline-block';
            }
            if (countdownElement) {
              countdownElement.style.display = 'block';
            }
            
            updateLastUpdateTime();
            
            // Start countdown
            countdownInterval = setInterval(updateCountdown, 1000);
            
            // Start auto-refresh
            autoRefreshInterval = setInterval(function() {
              refreshData();
              timeLeft = refreshIntervalSeconds; // Reset countdown
            }, refreshIntervalSeconds * 1000);
          }

          function stopAutoRefresh() {
            isAutoRefreshActive = false;
            
            // Entferne Auto-refresh Status
            localStorage.removeItem('autoRefreshActive');
            
            clearInterval(autoRefreshInterval);
            clearInterval(countdownInterval);
            
            // Update UI
            toggleButton.innerHTML = '<i class="bi bi-play-circle"></i> Auto-Refresh starten';
            toggleButton.classList.remove('btn-outline-danger');
            toggleButton.classList.add('btn-outline-primary');
            
            if (refreshIcon) {
              refreshIcon.className = 'bi bi-play-circle';
            }
            if (dropdownLiveIndicator) {
              dropdownLiveIndicator.style.display = 'none';
            }
            if (countdownElement) {
              countdownElement.style.display = 'none';
            }
          }

          function updateCountdown() {
            if (timeLeft <= 0) {
              timeLeft = refreshIntervalSeconds;
              return;
            }
            
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            if (countdownElement) {
              countdownElement.textContent = `Nächste Aktualisierung in: ${minutes}:${seconds.toString().padStart(2, '0')}`;
            }
            timeLeft--;
          }

          function updateLastUpdateTime() {
            const now = new Date();
            const timeString = now.toLocaleString('de-DE', { 
              timeZone: 'Europe/Berlin',
              year: 'numeric',
              month: '2-digit',
              day: '2-digit',
              hour: '2-digit', 
              minute: '2-digit',
              second: '2-digit'
            }) + ' MEZ/MESZ';
            if (lastUpdateElement) {
              lastUpdateElement.textContent = timeString;
            }
          }
        }

        function refreshData() {
          // Zeige Loading-Indikator
          if (countdownElement) {
            const originalText = countdownElement.textContent;
            countdownElement.textContent = 'Aktualisiere Daten...';
          }
          
          // Markiere dass ein manueller Refresh stattfindet
          localStorage.setItem('lastAutoRefresh', Date.now().toString());
          
          // Benachrichtige alle Chart-Seiten über bevorstehende Aktualisierung
          localStorage.setItem('dataUpdateInProgress', 'true');
          
          // Sende AJAX-Request für Datenaktualisierung
          fetch('<%= refresh_data_cryptocurrencies_path %>', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
              'Content-Type': 'application/json',
              'Accept': 'text/html'
            }
          })
          .then(response => {
            if (response.ok) {
              updateLastUpdateTime();
              if (countdownElement) {
                countdownElement.textContent = 'Daten aktualisiert!';
              }
              
              // Benachrichtige alle Chart-Seiten über erfolgreiche Aktualisierung
              localStorage.setItem('dataUpdated', Date.now().toString());
              localStorage.removeItem('dataUpdateInProgress');
              
              // Kurze Verzögerung, dann Seite neu laden
              setTimeout(() => {
                // Entferne den noDataRefreshAttempt flag vor dem Reload
                sessionStorage.removeItem('noDataRefreshAttempt');
                window.location.reload();
              }, 1000);
            } else {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
          })
          .catch(error => {
            console.error('Fehler beim Aktualisieren der Daten:', error);
            if (countdownElement) {
              countdownElement.textContent = 'Fehler beim Aktualisieren';
            }
            
            // Entferne Auto-refresh Marker bei Fehler
            localStorage.removeItem('lastAutoRefresh');
            localStorage.removeItem('dataUpdateInProgress');
            
            setTimeout(() => {
              if (countdownElement && isAutoRefreshActive) {
                const minutes = Math.floor(timeLeft / 60);
                const seconds = timeLeft % 60;
                countdownElement.textContent = `Nächste Aktualisierung in: ${minutes}:${seconds.toString().padStart(2, '0')}`;
              }
            }, 3000);
          });
        }

        // Event Listener für Chart-Seiten - lauscht auf Datenaktualisierungen
        if (window.location.pathname.includes('/chart/')) {
          // Überwache localStorage für Datenaktualisierungen
          window.addEventListener('storage', function(e) {
            if (e.key === 'dataUpdated') {
              console.log('Datenaktualisierung erkannt, lade Chart-Seite neu...');
              
              // Zeige kurzen Hinweis
              const notification = document.createElement('div');
              notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                background: rgba(40,167,69,0.95);
                color: white;
                padding: 12px 16px;
                border-radius: 6px;
                font-size: 14px;
                z-index: 9999;
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
                animation: slideIn 0.3s ease-out;
              `;
              notification.innerHTML = '<i class="bi bi-check-circle me-2"></i>Daten aktualisiert - Lade Charts neu...';
              
              // CSS Animation hinzufügen
              const style = document.createElement('style');
              style.textContent = `
                @keyframes slideIn {
                  from { transform: translateX(100%); opacity: 0; }
                  to { transform: translateX(0); opacity: 1; }
                }
              `;
              document.head.appendChild(style);
              document.body.appendChild(notification);
              
              // Nach kurzer Verzögerung Seite neu laden
              setTimeout(() => {
                window.location.reload();
              }, 1500);
            }
          });
          
          // Prüfe beim Laden der Chart-Seite, ob gerade eine Aktualisierung läuft
          if (localStorage.getItem('dataUpdateInProgress') === 'true') {
            console.log('Datenaktualisierung läuft, warte auf Abschluss...');
            
            const waitingNotification = document.createElement('div');
            waitingNotification.style.cssText = `
              position: fixed;
              top: 20px;
              right: 20px;
              background: rgba(0,123,255,0.95);
              color: white;
              padding: 12px 16px;
              border-radius: 6px;
              font-size: 14px;
              z-index: 9999;
              box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            `;
            waitingNotification.innerHTML = '<i class="bi bi-arrow-clockwise spin me-2"></i>Datenaktualisierung läuft...';
            document.body.appendChild(waitingNotification);
          }
        }

        // Manual refresh button functionality - nur auf der Hauptseite
        if (isMainPage) {
          const manualRefreshLinks = document.querySelectorAll('a[href*="refresh_data"]');
          manualRefreshLinks.forEach(link => {
            link.addEventListener('click', function(e) {
              e.preventDefault();
              
              // Zeige Loading-Zustand
              const originalText = this.innerHTML;
              this.innerHTML = '<i class="bi bi-arrow-clockwise spin"></i> Aktualisiere...';
              this.classList.add('disabled');
              
              // Markiere dass ein manueller Refresh stattfindet
              localStorage.setItem('lastAutoRefresh', Date.now().toString());
              
              // Benachrichtige alle Chart-Seiten über bevorstehende Aktualisierung
              localStorage.setItem('dataUpdateInProgress', 'true');
              
              // Führe Refresh aus
              fetch('<%= refresh_data_cryptocurrencies_path %>', {
                method: 'POST',
                headers: {
                  'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
                  'Content-Type': 'application/json',
                  'Accept': 'text/html'
                }
              })
              .then(response => {
                if (response.ok) {
                  this.innerHTML = '<i class="bi bi-check-circle"></i> Aktualisiert!';
                  
                  // Benachrichtige alle Chart-Seiten über erfolgreiche Aktualisierung
                  localStorage.setItem('dataUpdated', Date.now().toString());
                  localStorage.removeItem('dataUpdateInProgress');
                  
                  // Kurze Verzögerung, dann Seite neu laden
                  setTimeout(() => {
                    // Entferne den noDataRefreshAttempt flag vor dem Reload
                    sessionStorage.removeItem('noDataRefreshAttempt');
                    window.location.reload();
                  }, 1000);
                } else {
                  throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
              })
              .catch(error => {
                console.error('Fehler beim manuellen Refresh:', error);
                this.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Fehler';
                
                // Entferne Auto-refresh Marker bei Fehler
                localStorage.removeItem('lastAutoRefresh');
                localStorage.removeItem('dataUpdateInProgress');
                
                setTimeout(() => {
                  this.innerHTML = originalText;
                  this.classList.remove('disabled');
                }, 3000);
                
                alert('Fehler beim Aktualisieren der Daten. Bitte versuchen Sie es erneut.');
              });
            });
          });
          
          // Automatische Datenaktualisierung beim Seitenaufruf
          // Prüfe ob Daten älter als 5 Minuten sind und aktualisiere automatisch
          checkAndRefreshDataOnLoad();
        }
        
        function checkAndRefreshDataOnLoad() {
          // Nur auf der Hauptseite ausführen
          if (window.location.pathname === '/' || window.location.pathname === '/cryptocurrencies') {
            // Prüfe ob bereits ein Refresh in den letzten 30 Sekunden stattgefunden hat
            const lastAutoRefresh = localStorage.getItem('lastAutoRefresh');
            const now = Date.now();
            
            if (lastAutoRefresh && (now - parseInt(lastAutoRefresh)) < 30000) {
              console.log('Auto-refresh wurde kürzlich ausgeführt, überspringe...');
              return;
            }
            
            // Suche nach dem Element mit "Letzte Aktualisierung"
            const allSmallElements = document.querySelectorAll('small');
            let lastUpdateElement = null;
            
            for (let element of allSmallElements) {
              if (element.textContent.includes('Letzte Aktualisierung')) {
                lastUpdateElement = element;
                break;
              }
            }
            
            if (lastUpdateElement) {
              // Extrahiere das Datum aus dem Text
              const updateText = lastUpdateElement.textContent;
              const dateMatch = updateText.match(/(\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}:\d{2})/);
              
              if (dateMatch) {
                const lastUpdateStr = dateMatch[1];
                const lastUpdate = parseGermanDateTime(lastUpdateStr);
                const now = new Date();
                const diffMinutes = (now - lastUpdate) / (1000 * 60);
                
                console.log(`Daten sind ${diffMinutes.toFixed(1)} Minuten alt`);
                
                // Wenn Daten älter als 5 Minuten sind, automatisch aktualisieren
                if (diffMinutes > 5) {
                  console.log('Daten sind älter als 5 Minuten, automatische Aktualisierung...');
                  // Markiere dass ein Auto-refresh stattfindet
                  localStorage.setItem('lastAutoRefresh', Date.now().toString());
                  
                  setTimeout(() => {
                    refreshDataSilently();
                  }, 1000); // Kurze Verzögerung für bessere UX
                } else {
                  console.log('Daten sind aktuell, kein Refresh nötig');
                }
              }
            } else {
              // Keine Daten vorhanden, prüfe ob bereits versucht wurde zu laden
              const noDataRefreshAttempt = sessionStorage.getItem('noDataRefreshAttempt');
              if (!noDataRefreshAttempt) {
                console.log('Keine Daten vorhanden, lade Daten...');
                sessionStorage.setItem('noDataRefreshAttempt', 'true');
                localStorage.setItem('lastAutoRefresh', Date.now().toString());
                
                setTimeout(() => {
                  refreshDataSilently();
                }, 1000);
              } else {
                console.log('Daten-Ladeversuch bereits unternommen');
              }
            }
          }
        }
        
        function parseGermanDateTime(dateStr) {
          // Format: "28.05.2024, 11:35:06 MEZ/MESZ" oder "28.05.2024 11:35:06"
          // Entferne MEZ/MESZ suffix falls vorhanden
          const cleanDateStr = dateStr.replace(/ MEZ\/MESZ$/, '');
          
          const parts = cleanDateStr.split(/[, ]/);
          let datePart, timePart;
          
          if (parts.length >= 2) {
            datePart = parts[0];
            timePart = parts[parts.length - 1]; // Letzter Teil ist die Zeit
          } else {
            return new Date(); // Fallback
          }
          
          const dateParts = datePart.split('.');
          const timeParts = timePart.split(':');
          
          if (dateParts.length === 3 && timeParts.length === 3) {
            return new Date(
              parseInt(dateParts[2]), // Jahr
              parseInt(dateParts[1]) - 1, // Monat (0-basiert)
              parseInt(dateParts[0]), // Tag
              parseInt(timeParts[0]), // Stunde
              parseInt(timeParts[1]), // Minute
              parseInt(timeParts[2])  // Sekunde
            );
          }
          
          return new Date(); // Fallback
        }
        
        function refreshDataSilently() {
          console.log('Starte stille Datenaktualisierung...');
          
          // Benachrichtige alle Chart-Seiten über bevorstehende Aktualisierung
          localStorage.setItem('dataUpdateInProgress', 'true');
          
          // Zeige einen subtilen Indikator
          const indicator = document.createElement('div');
          indicator.style.cssText = `
            position: fixed;
            top: 10px;
            right: 10px;
            background: rgba(0,123,255,0.9);
            color: white;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 12px;
            z-index: 9999;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
          `;
          indicator.textContent = 'Aktualisiere Daten...';
          document.body.appendChild(indicator);
          
          // Stille Aktualisierung
          fetch('<%= refresh_data_cryptocurrencies_path %>', {
            method: 'POST',
            headers: {
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content'),
              'Content-Type': 'application/json',
              'Accept': 'text/html'
            }
          })
          .then(response => {
            if (response.ok) {
              indicator.textContent = 'Daten aktualisiert!';
              indicator.style.background = 'rgba(40,167,69,0.9)';
              
              // Benachrichtige alle Chart-Seiten über erfolgreiche Aktualisierung
              localStorage.setItem('dataUpdated', Date.now().toString());
              localStorage.removeItem('dataUpdateInProgress');
              
              // Kurz anzeigen, dann Seite neu laden
              setTimeout(() => {
                document.body.removeChild(indicator);
                // Entferne den noDataRefreshAttempt flag vor dem Reload
                sessionStorage.removeItem('noDataRefreshAttempt');
                window.location.reload();
              }, 1500);
            } else {
              throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
          })
          .catch(error => {
            console.error('Fehler beim automatischen Refresh:', error);
            indicator.textContent = 'Fehler beim Aktualisieren';
            indicator.style.background = 'rgba(220,53,69,0.9)';
            
            // Entferne Auto-refresh Marker bei Fehler
            localStorage.removeItem('lastAutoRefresh');
            localStorage.removeItem('dataUpdateInProgress');
            
            setTimeout(() => {
              document.body.removeChild(indicator);
            }, 3000);
          });
        }
      });
    </script>
  </body>
</html> 